{"ast":null,"code":"// /client/src/services/SupporterService.ts\n// Dedicated service for supporter and donor CRM functionality\n\nimport BaseService from './baseServices';\nclass SupporterService extends BaseService {\n  // ===== SUPPORTER CRUD OPERATIONS =====\n\n  /**\n   * Create a new supporter with full CRM data\n   */\n  async createSupporter(clubId, supporterData) {\n    return this.request(`/clubs/${clubId}/supporters`, {\n      method: 'POST',\n      body: JSON.stringify(supporterData)\n    });\n  }\n\n  /**\n   * Get all supporters for a club with advanced filtering\n   */\n  async getSupporters(clubId, filters) {\n    const params = filters ? `?${new URLSearchParams(filters).toString()}` : '';\n    return this.request(`/clubs/${clubId}/supporters${params}`);\n  }\n\n  /**\n   * Get a specific supporter with full details\n   */\n  async getSupporterDetails(supporterId) {\n    return this.request(`/supporters/${supporterId}`);\n  }\n\n  /**\n   * Update a supporter with new CRM data\n   */\n  async updateSupporter(supporterId, updates) {\n    return this.request(`/supporters/${supporterId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates)\n    });\n  }\n\n  /**\n   * Delete a supporter (with relationship checks)\n   */\n  async deleteSupporter(supporterId) {\n    return this.request(`/supporters/${supporterId}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // ===== DONOR ANALYTICS =====\n\n  /**\n   * Get comprehensive donor statistics and segmentation\n   */\n  async getDonorStats(clubId) {\n    return this.request(`/clubs/${clubId}/supporters/donor-stats`);\n  }\n\n  /**\n   * Get top donors by total contribution\n   */\n  async getTopDonors(clubId, limit = 10) {\n    return this.request(`/clubs/${clubId}/supporters/top-donors?limit=${limit}`);\n  }\n\n  /**\n   * Get lapsed donors for retention campaigns\n   */\n  async getLapsedDonors(clubId, months = 12) {\n    return this.request(`/clubs/${clubId}/supporters/lapsed-donors?months=${months}`);\n  }\n\n  /**\n   * Calculate donor retention rate over time\n   */\n  async getDonorRetentionRate(clubId, timeframe = 12) {\n    return this.request(`/clubs/${clubId}/supporters/retention-rate?timeframe=${timeframe}`);\n  }\n\n  // ===== SUPPORTER SEGMENTATION =====\n\n  /**\n   * Get supporters by type (volunteer, donor, sponsor)\n   */\n  async getSupportersByType(clubId, type) {\n    return this.request(`/clubs/${clubId}/supporters/type/${type}`);\n  }\n\n  /**\n   * Get supporters by relationship strength\n   */\n  async getSupportersByRelationship(clubId, strength) {\n    return this.request(`/clubs/${clubId}/supporters/relationship/${strength}`);\n  }\n\n  /**\n   * Get supporters by lifecycle stage\n   */\n  async getSupportersByLifecycle(clubId, stage) {\n    return this.request(`/clubs/${clubId}/supporters/lifecycle/${stage}`);\n  }\n\n  /**\n   * Search supporters with advanced filters\n   */\n  async searchSupporters(clubId, query, filters) {\n    const params = new URLSearchParams({\n      q: query\n    });\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined) params.append(key, value.toString());\n      });\n    }\n    return this.request(`/clubs/${clubId}/supporters/search?${params.toString()}`);\n  }\n\n  // ===== SPECIALIZED SUPPORTER QUERIES =====\n\n  /**\n   * Get available volunteers for events\n   */\n  async getAvailableVolunteers(clubId, eventId) {\n    const params = eventId ? `?event_id=${eventId}` : '';\n    return this.request(`/clubs/${clubId}/supporters/available-volunteers${params}`);\n  }\n\n  /**\n   * Get supporter engagement details and metrics\n   */\n  async getSupporterEngagement(supporterId) {\n    return this.request(`/supporters/${supporterId}/engagement`);\n  }\n\n  /**\n   * Get comprehensive supporter statistics\n   */\n  async getSupporterStats(clubId) {\n    return this.request(`/clubs/${clubId}/supporters/stats`);\n  }\n\n  // ===== BULK OPERATIONS =====\n\n  /**\n   * Bulk create supporters (max 100 at once)\n   */\n  async bulkCreateSupporters(clubId, supporters) {\n    if (supporters.length > 100) {\n      throw new Error('Maximum 100 supporters can be created at once');\n    }\n    return this.request(`/clubs/${clubId}/supporters/bulk`, {\n      method: 'POST',\n      body: JSON.stringify({\n        supporters\n      })\n    });\n  }\n\n  /**\n   * Export supporters with filtering options\n   */\n  async exportSupporters(clubId, filters) {\n    const params = filters ? `?${new URLSearchParams(filters).toString()}` : '';\n    return this.request(`/clubs/${clubId}/supporters/export${params}`);\n  }\n\n  // ===== FOLLOW-UP TASK MANAGEMENT =====\n\n  /**\n   * Get follow-up tasks for the club\n   */\n  async getFollowUpTasks(clubId, overdue = false) {\n    return this.request(`/clubs/${clubId}/follow-up-tasks?overdue=${overdue}`);\n  }\n\n  // ===== HELPER METHODS =====\n\n  /**\n   * Validate supporter data before submission\n   */\n  validateSupporterData(data) {\n    var _data$name;\n    const errors = [];\n    if (!((_data$name = data.name) !== null && _data$name !== void 0 && _data$name.trim())) {\n      errors.push('Supporter name is required');\n    }\n    if (!data.type) {\n      errors.push('Supporter type is required');\n    }\n    if (data.email && !/\\S+@\\S+\\.\\S+/.test(data.email)) {\n      errors.push('Invalid email format');\n    }\n    if (data.phone && !/^[\\+]?[0-9\\s\\-\\(\\)]{10,}$/.test(data.phone)) {\n      errors.push('Invalid phone number format');\n    }\n    return errors;\n  }\n\n  /**\n   * Format supporter data for display\n   */\n  formatSupporterForDisplay(supporter) {\n    return {\n      ...supporter,\n      full_address: this.formatAddress(supporter),\n      formatted_phone: this.formatPhoneNumber(supporter.phone),\n      display_name: supporter.name,\n      relationship_badge: this.getRelationshipBadge(supporter.relationship_strength),\n      lifecycle_badge: this.getLifecycleBadge(supporter.lifecycle_stage)\n    };\n  }\n  formatAddress(supporter) {\n    const parts = [supporter.address_line1, supporter.address_line2, supporter.city, supporter.state_province, supporter.postal_code, supporter.country].filter(Boolean);\n    return parts.join(', ');\n  }\n  formatPhoneNumber(phone) {\n    if (!phone) return '';\n\n    // Basic phone formatting - you can enhance this based on your needs\n    const cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.length === 11 && cleaned.startsWith('44')) {\n      return `+44 ${cleaned.slice(2, 5)} ${cleaned.slice(5, 8)} ${cleaned.slice(8)}`;\n    }\n    return phone;\n  }\n  getRelationshipBadge(strength) {\n    const badges = {\n      prospect: {\n        color: 'gray',\n        label: 'Prospect'\n      },\n      new: {\n        color: 'blue',\n        label: 'New'\n      },\n      regular: {\n        color: 'green',\n        label: 'Regular'\n      },\n      major: {\n        color: 'purple',\n        label: 'Major Donor'\n      },\n      lapsed: {\n        color: 'yellow',\n        label: 'Lapsed'\n      },\n      inactive: {\n        color: 'red',\n        label: 'Inactive'\n      }\n    };\n    return badges[strength] || badges.prospect;\n  }\n  getLifecycleBadge(stage) {\n    const badges = {\n      prospect: {\n        color: 'gray',\n        label: 'Prospect'\n      },\n      first_time: {\n        color: 'blue',\n        label: 'First Time'\n      },\n      repeat: {\n        color: 'green',\n        label: 'Repeat'\n      },\n      major: {\n        color: 'purple',\n        label: 'Major'\n      },\n      lapsed: {\n        color: 'yellow',\n        label: 'Lapsed'\n      },\n      champion: {\n        color: 'gold',\n        label: 'Champion'\n      }\n    };\n    return badges[stage] || badges.prospect;\n  }\n}\nexport default new SupporterService();","map":{"version":3,"names":["BaseService","SupporterService","createSupporter","clubId","supporterData","request","method","body","JSON","stringify","getSupporters","filters","params","URLSearchParams","toString","getSupporterDetails","supporterId","updateSupporter","updates","deleteSupporter","getDonorStats","getTopDonors","limit","getLapsedDonors","months","getDonorRetentionRate","timeframe","getSupportersByType","type","getSupportersByRelationship","strength","getSupportersByLifecycle","stage","searchSupporters","query","q","Object","entries","forEach","key","value","undefined","append","getAvailableVolunteers","eventId","getSupporterEngagement","getSupporterStats","bulkCreateSupporters","supporters","length","Error","exportSupporters","getFollowUpTasks","overdue","validateSupporterData","data","_data$name","errors","name","trim","push","email","test","phone","formatSupporterForDisplay","supporter","full_address","formatAddress","formatted_phone","formatPhoneNumber","display_name","relationship_badge","getRelationshipBadge","relationship_strength","lifecycle_badge","getLifecycleBadge","lifecycle_stage","parts","address_line1","address_line2","city","state_province","postal_code","country","filter","Boolean","join","cleaned","replace","startsWith","slice","badges","prospect","color","label","new","regular","major","lapsed","inactive","first_time","repeat","champion"],"sources":["/home/paulag/fundraisely-club/client/src/services/supporterService.ts"],"sourcesContent":["// /client/src/services/SupporterService.ts\n// Dedicated service for supporter and donor CRM functionality\n\nimport BaseService from './baseServices';\n\nexport interface CreateSupporterData {\n  // Core fields\n  name: string;\n  type: 'volunteer' | 'donor' | 'sponsor';\n  notes?: string;\n  \n  // Contact information\n  email?: string;\n  phone?: string;\n  address_line1?: string;\n  address_line2?: string;\n  city?: string;\n  state_province?: string;\n  postal_code?: string;\n  country?: string;\n  preferred_contact_method?: 'email' | 'phone' | 'post' | 'sms';\n  \n  // Relationship management\n  relationship_strength?: 'prospect' | 'new' | 'regular' | 'major' | 'lapsed' | 'inactive';\n  contact_source?: 'website' | 'event' | 'referral' | 'social_media' | 'cold_outreach' | 'walk_in' | 'other';\n  referral_source?: string;\n  \n  // Communication preferences\n  email_subscribed?: boolean;\n  sms_subscribed?: boolean;\n  newsletter_subscribed?: boolean;\n  event_notifications?: boolean;\n  do_not_contact?: boolean;\n  \n  // Lifecycle & Priority\n  lifecycle_stage?: 'prospect' | 'first_time' | 'repeat' | 'major' | 'lapsed' | 'champion';\n  priority_level?: 'low' | 'medium' | 'high' | 'urgent';\n  next_contact_date?: string;\n  \n  // Flexible data\n  tags?: string[];\n  interests?: string[];\n  skills?: string[];\n  communication_preferences?: Record<string, any>;\n  \n  // GDPR\n  gdpr_consent?: boolean;\n  data_protection_notes?: string;\n}\n\nexport interface SupporterFilters {\n  type?: 'volunteer' | 'donor' | 'sponsor';\n  search?: string;\n  relationship_strength?: 'prospect' | 'new' | 'regular' | 'major' | 'lapsed' | 'inactive';\n  lifecycle_stage?: 'prospect' | 'first_time' | 'repeat' | 'major' | 'lapsed' | 'champion';\n  priority_level?: 'low' | 'medium' | 'high' | 'urgent';\n  limit?: number;\n  offset?: number;\n}\n\nexport interface DonorStats {\n  // Overview metrics\n  total_donors: number;\n  active_donors: number;\n  recent_donors: number;\n  new_donors_this_month: number;\n  \n  // Financial metrics\n  total_amount_raised: number;\n  average_donor_value: number;\n  largest_donor_amount: number;\n  \n  // Segmentation\n  relationship_breakdown: Array<{ relationship_strength: string; count: number }>;\n  lifecycle_breakdown: Array<{ lifecycle_stage: string; count: number }>;\n}\n\nexport interface RetentionAnalysis {\n  previous_period_donors: number;\n  retained_donors: number;\n  retention_rate: number;\n  timeframe_months: number;\n}\n\nclass SupporterService extends BaseService {\n  // ===== SUPPORTER CRUD OPERATIONS =====\n\n  /**\n   * Create a new supporter with full CRM data\n   */\n  async createSupporter(clubId: string, supporterData: CreateSupporterData) {\n    return this.request<{ message: string; supporter: any }>(`/clubs/${clubId}/supporters`, {\n      method: 'POST',\n      body: JSON.stringify(supporterData),\n    });\n  }\n\n  /**\n   * Get all supporters for a club with advanced filtering\n   */\n  async getSupporters(clubId: string, filters?: SupporterFilters) {\n    const params = filters ? `?${new URLSearchParams(filters as any).toString()}` : '';\n    return this.request<{ \n      supporters: any[]; \n      total: number; \n      filters_applied: SupporterFilters;\n    }>(`/clubs/${clubId}/supporters${params}`);\n  }\n\n  /**\n   * Get a specific supporter with full details\n   */\n  async getSupporterDetails(supporterId: string) {\n    return this.request<{ supporter: any }>(`/supporters/${supporterId}`);\n  }\n\n  /**\n   * Update a supporter with new CRM data\n   */\n  async updateSupporter(supporterId: string, updates: Partial<CreateSupporterData>) {\n    return this.request<{ message: string; supporter: any }>(`/supporters/${supporterId}`, {\n      method: 'PUT',\n      body: JSON.stringify(updates),\n    });\n  }\n\n  /**\n   * Delete a supporter (with relationship checks)\n   */\n  async deleteSupporter(supporterId: string) {\n    return this.request<{ message: string }>(`/supporters/${supporterId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // ===== DONOR ANALYTICS =====\n\n  /**\n   * Get comprehensive donor statistics and segmentation\n   */\n  async getDonorStats(clubId: string) {\n    return this.request<{ \n      donor_statistics: DonorStats; \n      generated_at: string;\n    }>(`/clubs/${clubId}/supporters/donor-stats`);\n  }\n\n  /**\n   * Get top donors by total contribution\n   */\n  async getTopDonors(clubId: string, limit: number = 10) {\n    return this.request<{ \n      top_donors: any[]; \n      limit: number;\n    }>(`/clubs/${clubId}/supporters/top-donors?limit=${limit}`);\n  }\n\n  /**\n   * Get lapsed donors for retention campaigns\n   */\n  async getLapsedDonors(clubId: string, months: number = 12) {\n    return this.request<{ \n      lapsed_donors: any[]; \n      threshold_months: number; \n      total_lapsed: number;\n    }>(`/clubs/${clubId}/supporters/lapsed-donors?months=${months}`);\n  }\n\n  /**\n   * Calculate donor retention rate over time\n   */\n  async getDonorRetentionRate(clubId: string, timeframe: number = 12) {\n    return this.request<{ \n      retention_analysis: RetentionAnalysis; \n      analysis_date: string;\n    }>(`/clubs/${clubId}/supporters/retention-rate?timeframe=${timeframe}`);\n  }\n\n  // ===== SUPPORTER SEGMENTATION =====\n\n  /**\n   * Get supporters by type (volunteer, donor, sponsor)\n   */\n  async getSupportersByType(clubId: string, type: 'volunteer' | 'donor' | 'sponsor') {\n    return this.request<{ \n      supporters: any[]; \n      type: string; \n      total: number;\n    }>(`/clubs/${clubId}/supporters/type/${type}`);\n  }\n\n  /**\n   * Get supporters by relationship strength\n   */\n  async getSupportersByRelationship(clubId: string, strength: 'prospect' | 'new' | 'regular' | 'major' | 'lapsed' | 'inactive') {\n    return this.request<{ \n      supporters: any[]; \n      relationship_strength: string; \n      total: number;\n    }>(`/clubs/${clubId}/supporters/relationship/${strength}`);\n  }\n\n  /**\n   * Get supporters by lifecycle stage\n   */\n  async getSupportersByLifecycle(clubId: string, stage: 'prospect' | 'first_time' | 'repeat' | 'major' | 'lapsed' | 'champion') {\n    return this.request<{ \n      supporters: any[]; \n      lifecycle_stage: string; \n      total: number;\n    }>(`/clubs/${clubId}/supporters/lifecycle/${stage}`);\n  }\n\n  /**\n   * Search supporters with advanced filters\n   */\n  async searchSupporters(clubId: string, query: string, filters?: Omit<SupporterFilters, 'search'>) {\n    const params = new URLSearchParams({ q: query });\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined) params.append(key, value.toString());\n      });\n    }\n    \n    return this.request<{ \n      search_results: any[]; \n      query: string; \n      filters: any; \n      total_results: number;\n    }>(`/clubs/${clubId}/supporters/search?${params.toString()}`);\n  }\n\n  // ===== SPECIALIZED SUPPORTER QUERIES =====\n\n  /**\n   * Get available volunteers for events\n   */\n  async getAvailableVolunteers(clubId: string, eventId?: string) {\n    const params = eventId ? `?event_id=${eventId}` : '';\n    return this.request<{ \n      available_volunteers: any[]; \n      event_id: string | null; \n      total: number;\n    }>(`/clubs/${clubId}/supporters/available-volunteers${params}`);\n  }\n\n  /**\n   * Get supporter engagement details and metrics\n   */\n  async getSupporterEngagement(supporterId: string) {\n    return this.request<{ \n      engagement_report: any; \n      generated_at: string;\n    }>(`/supporters/${supporterId}/engagement`);\n  }\n\n  /**\n   * Get comprehensive supporter statistics\n   */\n  async getSupporterStats(clubId: string) {\n    return this.request<{ \n      supporter_statistics: any; \n      generated_at: string;\n    }>(`/clubs/${clubId}/supporters/stats`);\n  }\n\n  // ===== BULK OPERATIONS =====\n\n  /**\n   * Bulk create supporters (max 100 at once)\n   */\n  async bulkCreateSupporters(clubId: string, supporters: CreateSupporterData[]) {\n    if (supporters.length > 100) {\n      throw new Error('Maximum 100 supporters can be created at once');\n    }\n    \n    return this.request<{ \n      message: string; \n      result: {\n        successful: any[];\n        errors: any[];\n        total_processed: number;\n        successful_count: number;\n        error_count: number;\n      };\n    }>(`/clubs/${clubId}/supporters/bulk`, {\n      method: 'POST',\n      body: JSON.stringify({ supporters }),\n    });\n  }\n\n  /**\n   * Export supporters with filtering options\n   */\n  async exportSupporters(clubId: string, filters?: SupporterFilters & { format?: 'csv' }) {\n    const params = filters ? `?${new URLSearchParams(filters as any).toString()}` : '';\n    return this.request<{ \n      export_data: any[]; \n      filename: string; \n      total_records: number; \n      export_format: string; \n      filters_applied: any; \n      generated_at: string;\n    }>(`/clubs/${clubId}/supporters/export${params}`);\n  }\n\n  // ===== FOLLOW-UP TASK MANAGEMENT =====\n\n  /**\n   * Get follow-up tasks for the club\n   */\n  async getFollowUpTasks(clubId: string, overdue: boolean = false) {\n    return this.request<{ \n      follow_up_tasks: any[]; \n      is_overdue_filter: boolean; \n      total_tasks: number;\n    }>(`/clubs/${clubId}/follow-up-tasks?overdue=${overdue}`);\n  }\n\n  // ===== HELPER METHODS =====\n\n  /**\n   * Validate supporter data before submission\n   */\n  validateSupporterData(data: CreateSupporterData): string[] {\n    const errors: string[] = [];\n\n    if (!data.name?.trim()) {\n      errors.push('Supporter name is required');\n    }\n\n    if (!data.type) {\n      errors.push('Supporter type is required');\n    }\n\n    if (data.email && !/\\S+@\\S+\\.\\S+/.test(data.email)) {\n      errors.push('Invalid email format');\n    }\n\n    if (data.phone && !/^[\\+]?[0-9\\s\\-\\(\\)]{10,}$/.test(data.phone)) {\n      errors.push('Invalid phone number format');\n    }\n\n    return errors;\n  }\n\n  /**\n   * Format supporter data for display\n   */\n  formatSupporterForDisplay(supporter: any) {\n    return {\n      ...supporter,\n      full_address: this.formatAddress(supporter),\n      formatted_phone: this.formatPhoneNumber(supporter.phone),\n      display_name: supporter.name,\n      relationship_badge: this.getRelationshipBadge(supporter.relationship_strength),\n      lifecycle_badge: this.getLifecycleBadge(supporter.lifecycle_stage),\n    };\n  }\n\n  private formatAddress(supporter: any): string {\n    const parts = [\n      supporter.address_line1,\n      supporter.address_line2,\n      supporter.city,\n      supporter.state_province,\n      supporter.postal_code,\n      supporter.country\n    ].filter(Boolean);\n    \n    return parts.join(', ');\n  }\n\n  private formatPhoneNumber(phone?: string): string {\n    if (!phone) return '';\n    \n    // Basic phone formatting - you can enhance this based on your needs\n    const cleaned = phone.replace(/\\D/g, '');\n    if (cleaned.length === 11 && cleaned.startsWith('44')) {\n      return `+44 ${cleaned.slice(2, 5)} ${cleaned.slice(5, 8)} ${cleaned.slice(8)}`;\n    }\n    return phone;\n  }\n\n  private getRelationshipBadge(strength?: string) {\n    const badges = {\n      prospect: { color: 'gray', label: 'Prospect' },\n      new: { color: 'blue', label: 'New' },\n      regular: { color: 'green', label: 'Regular' },\n      major: { color: 'purple', label: 'Major Donor' },\n      lapsed: { color: 'yellow', label: 'Lapsed' },\n      inactive: { color: 'red', label: 'Inactive' }\n    };\n    return badges[strength as keyof typeof badges] || badges.prospect;\n  }\n\n  private getLifecycleBadge(stage?: string) {\n    const badges = {\n      prospect: { color: 'gray', label: 'Prospect' },\n      first_time: { color: 'blue', label: 'First Time' },\n      repeat: { color: 'green', label: 'Repeat' },\n      major: { color: 'purple', label: 'Major' },\n      lapsed: { color: 'yellow', label: 'Lapsed' },\n      champion: { color: 'gold', label: 'Champion' }\n    };\n    return badges[stage as keyof typeof badges] || badges.prospect;\n  }\n}\n\nexport default new SupporterService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}